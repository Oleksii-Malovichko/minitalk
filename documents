Основные типы сигналов:

    SIGINT (2): Прерывание работы процесса (например, через Ctrl+C в терминале).
    SIGTERM (15): Окончание работы процесса (обычно используется для вежливого завершения процесса).
    SIGKILL (9): Принудительное завершение процесса. Процесс не может перехватить или игнорировать этот сигнал.
    SIGSTOP (19): Приостановка процесса.
    SIGCONT (18): Возобновление выполнения приостановленного процесса.
    SIGSEGV (11): Ошибка сегментации (сигнал, посылаемый процессу при обращении к недопустимой памяти).
    SIGUSR1 и SIGUSR2: Пользовательские сигналы, которые могут быть использованы для конкретных целей.

Использование: kill -NAMESIG PID


Важные характеристики процесса:

    PID (Process ID): Уникальный идентификатор процесса.
    PPID (Parent Process ID): Идентификатор родительского процесса.
    Состояние процесса: Процесс может находиться в одном из нескольких состояний, таких как:
        R (Running): Процесс выполняется или готов к выполнению.
        S (Sleeping): Процесс спит, ожидая события.
        Z (Zombie): Процесс завершен, но его родительский процесс не получил информацию о завершении.
        T (Stopped): Процесс остановлен.

1) Ф-я signal используется для того, чтобы перехватывать сигнал и затем что-то делать (сигнал 9 перехватить невозможно)
Синтаксис: void (*signal(int signum, void (*handler)(int)))(int);

2) Ф-я sigemptyset используется для инициализации набора сигналов, тоесть она очищает все биты в структуре, представляющей набор сигналов 
Синтаксис: int sigemptyset(sigset_t *set);
set — это указатель на переменную типа sigset_t, которая представляет набор сигналов.
{
	sigset_t set;
	sigemptyset(&set);
}

3) Ф-я sigaddset добавляет указанный сигнал в набор сигналов. Это полезно, если нужно управлять набором сигналов (например, блокировать
 несколько сигналов одновременно)
Синтаксис:
Полный пример:
{
	sigset_t set; // создали структуру
	sigemptyset(&set); // очистили ее
	sigaddset(&set, SIGINT); // добавили сигнал 1
	sigaddset(&set, SIGTERM); // добавили сигнал 2
}

4) Ф-я sigaction является более мощной и гибкой альтернативой signal(). Она позволяет более точно контролировать поведение процесса при получении
сигнала, включая возможность блокировки сигналов во время обработки, а также настройку доп. параметров
Синтаксис:
